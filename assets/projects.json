[
    {
        "url": "gym-classification",
        "title": "Exercise classification using time series",
        "content": "This project evaluates the performance of various classification algorithms on a dataset of gym exercises recorded using time series data from the accelerometer and gyroscope sensors of a smartphone device. The primary objective is to determine if you can accurately classify gym exercises based on the sensor data collected. The project compares a number of common machine learning algorithms such as Random Forest, k-Nearest Neighbours with Euclidean Distance and Na√Øve Bayes, as well as some time series specific algorithms, including Rocket and Time Series Forest, on a range of different variations of the dataset. These variations include different attributes such as using univariate data from a single axis or using multivariate data by combining data from multiple axes. Prior to analysis, the time series data is pre-processed to use same-length normalised time series data of 10 seconds. The results of this project show that when using multivariate time series data that uses both the accelerometer and gyroscope data, an accuracy of 99.2% can be achieved using the Rocket classifier.",
        "images": [{ "url": "exercise_classification_results.png", "alt": "A txt file with all the results of machine learning experiment"}, { "url": "Harry_gym_movements.png", "alt": "Screenshots of a confusion matrix showing the predictions"}],
        "githubRepoLink": "https://github.com/hazzaRR/ExerciseClassification",
        "technology": "Python",
        "technologies": [
            "Python", "Sci-kit learn", "SKtime", "Pandas", "Flask"
        ],
        "reportLink" : "/thirdYearProjectReport.pdf"
    },
        {
        "url": "appointment-booking-system",
        "title": "Appointment Booking System",
        "content": "I developed a robust appointment booking system tailored for local business owners. The backend, developed using Spring Boot, seamlessly integrates with a PostgreSQL database to allow owners to effortlessly create, update, delete, and manage appointments, services, and client details. The Vue 3 frontend enhances the user interface, ensuring a smooth experience for the owner and easy interaction with the REST API backend. One standout feature is the system's ability to generate summary reports of appointments within specified date ranges, simplifying administrative tasks for tax and business purposes. Additionally, the system offers a convenient PDF generation feature. To streamline communication, automated emails are sent to clients upon appointment creation, including comprehensive details and service information using Java Mail API. A unique touch is the integration of the Java Mail API, Spring Scheduler, and cron jobs, enabling the system to automatically send 24-hour reminders to clients before their scheduled appointments. Moreover, confirmation emails come with .ics files, allowing clients to effortlessly add appointments to their online calendars. This personal project showcases my proficiency in Java, Spring Boot, PostgreSQL, Vue 3, and my ability to create a practical, user-friendly solution for business management. To demonstrate my cloud skills and allow for seamless accessibility I deployed the whole system to Azure. The Spring boot backend is hosted on Azure App Service, the Vue.js frontend on Azure Static web apps and finally, the Postgres database using Postgres flexible server.",
        "images": [{ "url": "dashboard.png", "alt": "Dashboard for managing appointments using different CRUD operations"}, { "url": "add-appointment.png", "alt": "Screenshot of adding a new appointment"}, { "url": "archive_treatments.png", "alt": "Screenshot of archiving a treatment service"}, { "url": "email_confirmation.png", "alt": "Screenshot of an email recieved by the client confirming their appointment"}, { "url": "generated_summary_report.png", "alt": "Screenshot of pdf file generated from details fetched for summary report"}, { "url": "search_treatments.png", "alt": "Screenshot of treatments table which is refined by search bar"}, { "url": "summary-report.png", "alt": "Screenshot of view to find the appointments completed between two date ranges"}],
        "githubRepoLink": "https://github.com/hazzaRR/AppointmentBookingSpring",
        "technology": "Java",
        "technologies": [
            "Java", "Spring Boot", "Vue.js", "PostgreSQL", "Azure", "Github Actions"
        ]
    },
    {
        "url": "personal-blog",
        "title": "Full stack personal blog app",
        "content": "I developed a full-stack blog application to post about my interests and experiences using various technologies, including Spring Boot for the backend, Vue.js for the frontend, and PostgreSQL for the database. The blog app implemented full CRUD functionality, enabling users to perform Create, Read, Update, and Delete (CRUD) operations seamlessly through the REST API. Security was important and therefore I incorporated JSON Web Token (JWT) authentication with asymmetric keys using Spring Security to authenticate user interactions. I made use of Azure services for deployment in order to guarantee a dependable and seamless user experience. Azure Static Web Apps hosted the frontend, and Azure App Service was used to deliver the backend. I used GitHub Actions to create a continuous integration and continuous deployment (CI/CD) pipeline that streamlined the deployment process. This guarantees that any updates or modifications made to the codebase are smoothly integrated into the live application in addition to facilitating an automated deployment process. Furthermore, I set up a PostgreSQL database using Azure PostgreSQL servers to store blog posts and user information. This was also integrated with Azure Blob Storage for media file storage.",
        "images": [{ "url": "add-post.png", "alt": "Adding post form"}, { "url": "edit-post.png", "alt": "Screenshot of editing a existing post"}, { "url": "manage-posts.png", "alt": "Screenshot of users existings post"}, { "url": "posts.png", "alt": "Screenshot of all existing public posts"}],
        "githubRepoLink": "https://github.com/hazzaRR/PersonalBlogSpring",
        "technology": "Java",
        "technologies": [
            "Java", "Spring Boot", "Vue.js", "PostgreSQL", "Azure", "Github Actions"
        ],
        "websiteLink": "https://blog.harryredman.com"
    },
    {
    "url": "dcfc-api",
    "title": "Derby County API",
    "content": "A REST API personal project that exposes endpoints for retrieving data on all Derby County match history and also upcoming fixtures. The motivation for creating this project is that I am a huge Derby County fan and wanted to be able to access historical match data, upcoming fixtures and other types of data using a REST API service which then could be used for further applications such as creating a frontend application to keep up to date with Derby County games or to build and train machine learning models using the data.\n To obtain the data for this project I used Python to create various Python scripts to webscrape the data from the web and store the data in a PostgreSQL database. The first script obtained historical match data by scraping the 11vs11 website for all historical Derby County matches. The second script enables scraping the Sky Sports website for any scheduled Derby County fixtures and stores the key details of that fixture such as the date, the webpage where the final result will be produced, teams, etc. Finally, the third script checks the PostgreSQL database for any fixtures that have been played and if so uses the stored Sky Sports website link to scrape the match data for the game. To ensure the API is always up to date I have set up cronjobs on my Raspberry Pi 4 to run the second and third script to run daily to find any new match or fixture data and add it to the database. \nThe backend Rest API for this project was created using Java Spring Boot and connects to a PostgreSQL database to store and retrieve data, which can be filtered in many ways such as by season, team, competition, etc. A Nuxt.js frontend was created to display the data along with the Scalar API docs to test/try out the endpoints of the API. \nThe whole project was deployed to Azure using a CI/CD pipeline using GitHub Actions and the Azure Services used to deploy this site were App Service, PostgreSQL flexible Server and Static Web Apps.",
    "images": [{ "url": "docs.png", "alt": "Screenshot of Scalar docs showing endpoints of api"},{ "url": "test-request.png", "alt": "Screenshot of sending test api request to endpoint with query params"},{ "url": "matches.png", "alt": "Screenshot of matches page displaying all the matches derby have played"}, { "url": "fixtures.png", "alt": "Screenshot of fixtures page displaying all of derbys upcoming fixtures"}],
    "githubRepoLink": "https://github.com/hazzaRR/DerbyCountySpring",
    "technology": "Java",
    "technologies": [
        "Java", "Spring Boot", "Nuxt.js", "PostgreSQL", "Azure", "Github Actions", "Python", "Linux"
    ],
    "websiteLink": "https://derby-county.harryredman.com"
    },
    {
        "url": "gym-classification-app",
        "title": "Real-time exercise classification app",
        "content": "As an extension of my individual final year university project, I developed a real-time gym exercise detection app that has a 99.9% accuracy using the time series classification model I developed. The app records accelerometer and gyroscope sensors in an Android smartphone at a frequency of 10 Hz and records 15 seconds of data. To create the app and access the phone's sensors, I utilised Android Studio Java. In addition, I set up a Python Flask server that ran my trained machine learning model, allowing for real-time predictions within the app by sending API calls to the Flask server.",
        "images": [{ "url": "realtime_app.png", "alt": "Screenshots of android app showing the exercise prediction"}],
        "githubRepoLink": "https://github.com/hazzaRR/AndroidExerciseDetectionApp",
        "technology": "Java Android Studio",
        "technologies": [
            "Python", "Pandas", "Flask", "Java", "Android Studio"
        ]
    },
    {
        "url": "nuxt-booking-system",
        "title": "Nuxt Booking System",
        "content": "An appointment booking system built using Nuxt.js, postgresSQL and Express.js which allows customers to book an appointment with an employee and gives employees the ability to set the availability, block certain days and change availability hours for certain days, whilst also managing their current bookings using different CRUD operations.",
        "images": [{ "url": "nuxt_booking.png", "alt": "An image of adjusting availability page"}],
        "githubRepoLink": "https://github.com/hazzaRR/NuxtBookingSystem",
        "technology": "Javascript",
        "technologies": [
            "Javascript", "Nuxt.js", "Tailwind CSS", "Node.js", "PostgreSQL", "Docker"
        ]
    },
    {
        "url": "secure-blogsite",
        "title": "Secure Blog Site",
        "content": "For my third-year developing secure software group project, we developed a secure blog site that protects against the following online vulnerabilities: cross-site scripting, cross-site request forgery, SQL injection, account enumeration, session hijacking, and brute force attacks. We built the system using the following technologies: Node JS/Express JS, React, Postgres SQL, Git, GitHub, Trello, Mocha and Chai for testing, and an Agile approach for planning and building the blog site.",
        "images": [{ "url": "bloggerino.png", "alt": "landing page for secure blog site"}],
        "githubRepoLink": "https://github.com/hazzaRR/bloggerino_source",
        "technology": "Javascript",
        "technologies": [
            "Javascript", "React.js", "PostgreSQL", "Node.js", "HTML", "CSS"
        ]
    },
    {
        "url": "car-park-system",
        "title": "Car park System",
        "content": "In my software engineering university group project, we built a carpark system using vanilla Javascript, HTML and CSS.  The system was created to help UEA manage the cars that enter and exit their car parks by allowing customers to book a space and providing directions to the car park's location using Google Maps API. As well as providing an administrator with the ability to block, free, and reserve spaces for customers whilst also adding new car parks to the system.",
        "images": [{ "url": "carpark.png", "alt": "An image of the UI for selecting a carpark on Google Maps"},{ "url": "carpark-checkin.png", "alt": "An image of driver checking in to page"},{ "url": "carpark-login.png", "alt": "Login page"},{ "url": "carpark-gui.png", "alt": "An image of the UI for selecting a carpark space"}],
        "githubRepoLink": "https://github.com/hazzaRR/Parkarino",
        "technology": "Javascript",
        "technologies": [
            "Javascript", "HTML", "CSS", "Node.js"
        ]
    },
    {
        "url": "appointment-system",
        "title": "Appointment Booking System Vanilla Javascript",
        "content": "An appointment booking system built using Javascript, Html and CSS that allows the owner to manage their appointments by using CRUD operations to create, update, delete and fetch appointments.",
        "images": [{ "url": "beautyroomcalendar.png", "alt": "An image of the display calendar for upcoming appointments"}],
        "githubRepoLink": "https://github.com/hazzaRR/BeautyRoomBookings",
        "technology": "Javascript",
        "technologies": [
            "Javascript", "HTML", "CSS", "Node.js", "PostgreSQL", "Docker"
        ]
    }
]