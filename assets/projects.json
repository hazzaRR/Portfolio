[
    {
        "url": "gym-classification",
        "title": "Exercise classification using time series",
        "content": "During my final year at university, I completed my third-year computing project that looked at using Time Series Classification (TSC) to accurately classify different gym movements. To achieve this I trained and tested a variety of different TSC algorithms using time series data that was recorded using accelerometer and gyroscope data from an Android smartphone. Before developing models, I first cleaned and formatted the data to be instances that were 10 seconds long and had a frequency of 10 Hz. To complete this project I used Python and the following libraries sktime, sklearn, NumPy, and pandas.",
        "images": [{ "url": "exercise_classification_results.png", "alt": "A txt file with all the results of machine learning experiment"}, { "url": "Harry_gym_movements.png", "alt": "Screnshots of a confusion matrix showing the predictions"}],
        "githubRepoLink": "https://github.com/hazzaRR/ExerciseClassification",
        "technology": "Python",
        "technologies": [
            "Python", "Sci-kit learn", "SKtime", "Pandas", "Flask"
        ],
        "reportLink" : "/thirdYearProjectReport.pdf"
    },
    {
        "url": "personal-blog",
        "title": "Full stack personal blog app",
        "content": "I developed a full-stack blog application to post about my interests and experiences using various technologies, including Spring Boot for the backend, Vue.js for the frontend, and PostgreSQL for the database. The blog app implemented full CRUD functionality, enabling users to perform Create, Read, Update, and Delete (CRUD) operations seamlessly through the REST API. Security was important and therefore I incorporated JSON Web Token (JWT) authentication with asymmetric keys using Spring Security to authenticate user interactions. I made use of Azure services for deployment in order to guarantee a dependable and seamless user experience. Azure Static Web Apps hosted the frontend, and Azure App Service was used to deliver the backend. I used GitHub Actions to create a continuous integration and continuous deployment (CI/CD) pipeline that streamlined the deployment process. This guarantees that any updates or modifications made to the codebase are smoothly integrated into the live application in addition to facilitating an automated deployment process. Furthermore, I set up a PostgreSQL database using Azure PostgreSQL servers to store blog posts and user information. This was also integrated with Azure Blob Storage for media file storage.",
        "images": [{ "url": "add-post.png", "alt": "Adding post form"}, { "url": "edit-post.png", "alt": "Screnshot of editing a existing post"}, { "url": "manage-posts.png", "alt": "Screnshot of users existings post"}, { "url": "posts.png", "alt": "Screnshot of all existing public posts"}],
        "githubRepoLink": "https://github.com/hazzaRR/PersonalBlogSpring",
        "technology": "Java",
        "technologies": [
            "Java", "Spring Boot", "Vue.js", "PostgreSQL", "Azure", "Github Actions"
        ]
    },
    {
        "url": "gym-classification-app",
        "title": "Real-time exercise classification app",
        "content": "As an extension of my individual final year university project, I developed a real-time gym exercise detection app that has a 99.9% accuracy using the time series classification model I developed. The app records accelerometer and gyroscope sensors in an Android smartphone at a frequency of 10 Hz and records 15 seconds of data. To create the app and access the phone's sensors, I utilised Android Studio Java. In addition, I set up a Python Flask server that ran my trained machine learning model, allowing for real-time predictions within the app by sending API calls to the Flask server.",
        "images": [{ "url": "realtime_app.png", "alt": "Screnshots of android app showing the exercise prediction"}],
        "githubRepoLink": "https://github.com/hazzaRR/AndroidExerciseDetectionApp",
        "technology": "Java Android Studio",
        "technologies": [
            "Python", "Pandas", "Flask", "Java", "Android Studio"
        ]
    },
    {
        "url": "nuxt-booking-system",
        "title": "Nuxt Booking System",
        "content": "An appointment booking system built using Nuxt.js, postgresSQL and Express.js which allows customers to book an appointment with an employee and gives employees the ability to set the availability, block certain days and change availability hours for certain days, whilst also managing their current bookings using different CRUD operations.",
        "images": [{ "url": "nuxt_booking.png", "alt": "An image of adjusting availability page"}],
        "githubRepoLink": "https://github.com/hazzaRR/NuxtBookingSystem",
        "technology": "Javascript",
        "technologies": [
            "Javascript", "Nuxt.js", "Tailwind CSS", "Node.js", "PostgreSQL", "Docker"
        ]
    },
    {
        "url": "secure-blogsite",
        "title": "Secure Blog Site",
        "content": "For my third-year developing secure software group project, we developed a secure blog site that protects against the following online vulnerabilities: cross-site scripting, cross-site request forgery, SQL injection, account enumeration, session hijacking, and brute force attacks. We built the system using the following technologies: Node JS/Express JS, React, Postgres SQL, Git, GitHub, Trello, Mocha and Chai for testing, and an Agile approach for planning and building the blog site.",
        "images": [{ "url": "bloggerino.png", "alt": "landing page for secure blog site"}],
        "githubRepoLink": "https://github.com/hazzaRR/bloggerino_source",
        "technology": "Javascript",
        "technologies": [
            "Javascript", "React.js", "PostgreSQL", "Node.js", "HTML", "CSS"
        ]
    },
    {
        "url": "car-park-system",
        "title": "Car park System",
        "content": "In my software engineering university group project, we built a carpark system using vanilla Javascript, HTML and CSS.  The system was created to help UEA manage the cars that enter and exit their car parks by allowing customers to book a space and providing directions to the car park's location using Google Maps API. As well as providing an administrator with the ability to block, free, and reserve spaces for customers whilst also adding new car parks to the system.",
        "images": [{ "url": "carpark.png", "alt": "An image of the UI for selecting a carpark on Google Maps"},{ "url": "carpark-checkin.png", "alt": "An image of driver checking in to page"},{ "url": "carpark-login.png", "alt": "Login page"},{ "url": "carpark-gui.png", "alt": "An image of the UI for selecting a carpark space"}],
        "githubRepoLink": "https://github.com/hazzaRR/Parkarino",
        "technology": "Javascript",
        "technologies": [
            "Javascript", "HTML", "CSS", "Node.js"
        ]
    },
    {
        "url": "appointment-system",
        "title": "Appointment Booking System",
        "content": "An appointment booking system for a small local business that allows the owner to manage their appointments by using CRUD operations to create, update, delete and fetch appointments.",
        "images": [{ "url": "beautyroomcalendar.png", "alt": "An image of the display calendar for upcoming appointments"}],
        "githubRepoLink": "https://github.com/hazzaRR/BeautyRoomBookings",
        "technology": "Javascript",
        "technologies": [
            "Javascript", "HTML", "CSS", "Node.js", "PostgreSQL", "Docker"
        ]
    }
]